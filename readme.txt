LSH for Curves

Ελευθέριος Αργύριος Καραμπάς  ΑΜ: 1115201400064
Ανάπτυξη Λογισμικού για Αλγοριθμικά Προβλήματα Άσκηση 1η


1)Διαδικαστικά
	Η εργασία είναι ανεβασμένη και στο github: https://github.com/LefterisKarampas/LSH_curves
	Έχουν υλοποιηθεί όλα τα κομμάτια της εργασίας και τα ατομικά και τα ομαδικά.



2)Οργάνωση του κώδικα
	
	- Στο φάκελο της άσκησης υπάρχουν 2 κατάλογοι, ο φάκελος include που περιέχει όλα τα header files της άσκησης,
	δηλαδή δηλώσεις κλάσεων και συναρτήσεων. Στον φάκελο src υλοποιούνται όλες αυτές οι συναρτήσεις στα αντιστοίχα αρχεία. Υπάρχει το main.cpp που περιέχει τη main του προγράμματος.


	- Στο αρχείο genarator.h υπάρχει η δήλωση της συνάρτησης για τον κώδικα της γεννήτριας αριθμών ομοίομοφης κατανομής και στο αρχείο genarator.cpp υλοποιείται ο κώδικας.

	- Στο αρχείο HashFunctions.h υπάρχουν οι δηλώσεις των συναρτήσεων κατακερματισμού και η αντίστοιχη υλοποίηση τους στο αρχείο HashFunctions.cpp

	- Στο αρχείο read_curves.cpp υλοποιούνται οι συναρτήσεις:

		a)read_curves: για το διάβασμα των καμπυλών απο το αρχείο και την δημιουργία της βασικής δομής LSH_Curve και την εισαγωγή των καμπυλών στην δομή αυτή.

		b)search_curves: για το διάβασμα καμπυλών απο το αρχείο και την αναζήτηση των πλησιέστερων καμπυλών με εμφάνιση είτε των γειτόνων είτε των στατιστικών.

		c)reconstruct: Για την περίπτωση των στατιστικών που ανακατασκευάζει την δομή LSH_Curve

	- Στο αρχεία HashTable.h και HashTable.cpp υπάρχουν αμφότερες οι δηλώσεις και οι υλοποιήσεις και των 2 κλάσεων HashTable και Bucket

	- Στο αρχείο Distance.h υπάρχουν οι δηλώσεις των συναρτήσεων DFT και DWT ενώ στο αρχείο Distance.cpp η υλοποίηση τους.

3)Κλάσεις και λειτουργικότητα

	Curve: Στην κλάση αυτή αποθηκέυουμε όλες τις πληροφορίες για μία καμπύλη, όπως την ίδια την καμπύλη, την καμπλύλη πλέγματος μετα το LSΗ και το id. Όλα τα δεδομένα είναι τύπου δείκτη ώστε να μην αποθηκεύουμε πολλές φόρες τα ίδια στοιχεία. Έτσι με τη χρήση των δεικτών αναφερόμαστε στα αντικείμενα αυτά.

	Node: Κάθε Node περιέχει ένα δείκτη σε κλάση Curve και ένα δείκτη στο επόμενο Node. Χρησιμοποείται για την υλοποίηση της List.

	List: Υλοποεί τη λίστα που αποθηκέυουμε τα δεδομένα μας(καμπύλες) και πάνω σε αυτή καταλήγουν να γίνονται οι περισσότερες πράξεις όπως αποθήκευση καμπύλης, αναζήτηση πλησιέστερου γείτονα, κτλ. Κάθε λίστα αποτελείται απο ένα δείκτη σε Node που είναι η κεφαλή της λίστας μας.

	Bucket: Το κάθε bucket αποτελείται απο μία λίστα, και χρησιμοποείται για την κατασκευή του HashTable.

	HashTable: Το HashTable υλοποιείται σαν ένας πίνακας απο buckets και έχει ακομά εναν δείκτη σε συνάρτηση για την hash_function ώστε να μπορούμε να χρησιμοποιήσουμε όποια επιθυμεί ο χρήστης χωρίς καμία αλλαγή του κώδικα. 

	Grid: η κλάση Grid αποθηκεύει τον vector t που ολισθαίνουμε το grid και το δ. Για κάθε καμπύλη που δέχεται, δημιουργεί την καμπύλή πλέμγατος που αναπαριστάται πάνω στο grid της.


	LSH_Curve: η κλάση αυτή δημιουργεί ενα πίνακα απο k Grids, το k δίνεται ως όρισμα στο πρόγραμμα, και ένα Ηashtable που θα εισάγουμε τις καμπύλες μας.


	Με τη παραπάνω δομή διαβάζοντας μία καμπύλη, ακολουθείται το εξής μονοπάτι:
		Το LSH_Curve ζητάει απο κάθε Grid να στείλει την αναπαράσταση της καμπύλης σε καμπύλη πλέγματος. Συνενώνει όλες τις καμπύλες πλέγματος που λαμβάνει απο κάθε Grid. Αφού τις συνενώσει, δημιουργεί ένα αντικείμενο τύπου Curve με πληροφορίες την καμπύλη, την καμπύλη πλέγματος και το id. Αυτό το αντικείμενο στέλνεται στο HashTable όπου με βάση την καμπύλη πλέγματος, δημιουργείται ένα hash_value που μας λέει σε ποιο bucket θα αποθηκευτεί. Αφού βρεθεί το bucket, εισάγουμε την Curve στη λίστα.


4)Μεταγλώττιση κώδικα

	Στη ρίζα του φακέλου της άσκησης, υπάρχει ένα Makefile που περιέχει την μεταγλώττιση του κώδικα.
	Με την εντολή make, μεταγλωττίζεται ο κώδικας και δημιουργείται στη ρίζα του φακέλου ένα εκτελέσιμο αρχείο με όνομα lsh και ο φάκελος objects με τα object files που παράχθηκαν μέσα σε αυτόν.
	Με την εντολή make clean, διαγράφονται το εκτελέσιμο αρχείο και ο φάκελος objects με τα αρχεία που παράχθηκαν κάτα τη μεταγγλώτιση.

5)Οδηγίες χρήσης προγράμματος
	
	Το πρόγραμμα περιμένει ως ορίσματα στη γραμμή εντολών:
		–d <input file>
		–q <query file>
		–k <int>  (default k=2)
		-L <int>  (default L=3)
		-ο <output file>
		-stats [optional]
		–function {DFT, DTW}
		–hash {classic, probabilistic}

	Το πρόγραμμα το τρέχουμε με την εντολή:
	./lsh –d <input file> –q <query file> –k <int> -L <int> -ο <output file> -stats [optional] –function {DFT, DTW} -hash {classic, probabilistic}

	Σε περίπτωση που δεν δοθεί κάποιο όρισμο ζητάτε απο το χρήστη.
